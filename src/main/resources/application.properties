# ===============================
#    APPLICATION
# ===============================
spring.application.name=location_service_be
# Profile1: Uses Faker to mock location provider
# Profile2: Uses Redis to mock location provider simulating a cache scenario
spring.profiles.active=Profile1
# Dev tool for GraphQL
spring.graphql.graphiql.enabled=true

# ===============================
#   DATA SOURCE
# ===============================
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url = jdbc:postgresql://${POSTGRES_SERVICE_ADDRESS}:${POSTGRES_SERVICE_PORT}/${POSTGRES_DB}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

#spring.datasource.hikari.connection-timeout = 600000
#spring.datasource.hikari.maximum-pool-size = 15
#spring.datasource.hikari.max-lifetime=1800000

# ===============================
#   JPA / HIBERNATE
# ===============================
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true

# ===============================
#   LOCATION PROVIDER MOCK
# ===============================
location.provider.mock.file=/mocks/locations.json
location.provider.mock.url=http://${FAKER_SERVICE_ADDRESS}:${FAKER_SERVICE_PORT}

# Using Redis as an alternative
spring.data.redis.host=${REDIS_SERVICE_ADDRESS}
spring.data.redis.port=${REDIS_SERVICE_PORT}
#spring.data.redis.password=
